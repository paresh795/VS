# Task ID: 2
# Title: Implement Image Upload and Storage
# Status: done
# Dependencies: 1
# Priority: high
# Description: Create the image upload functionality that allows users to upload JPEG/PNG files up to 10MB and store them in Supabase.
# Details:
1. Create a drag-and-drop upload component using shadcn/ui
2. Implement client-side validation for:
   - File type (JPEG/PNG only)
   - File size (â‰¤10MB)
   - Image dimensions validation
3. Create API route for secure uploads:
   ```typescript
   // pages/api/upload.ts
   export default async function handler(req, res) {
     const { user } = await getAuth(req);
     if (!user) return res.status(401).json({ error: 'Unauthorized' });
     
     // Process multipart form data
     const form = new FormData();
     const { file } = await parseForm(req);
     
     // Upload to Supabase
     const { data, error } = await supabase.storage
       .from('originals')
       .upload(`${user.id}/${uuidv4()}.${getExtension(file.name)}`, file);
     
     if (error) return res.status(500).json({ error });
     
     // Create job record
     const job = await db.insert(jobs).values({
       userId: user.id,
       type: 'upload',
       status: 'completed',
       originalUrl: data.path
     }).returning();
     
     return res.status(200).json({ jobId: job[0].id, imageUrl: data.path });
   }
   ```
4. Implement progress indicator for uploads
5. Add error handling and retry logic

# Test Strategy:
1. Test file upload with various file types and sizes
2. Verify rejection of invalid files (wrong format, too large)
3. Test concurrent uploads
4. Verify proper storage in Supabase bucket
5. Confirm proper job record creation in database

# Subtasks:
## 1. Implement Frontend Drag-and-Drop Component with Validation [done]
### Dependencies: None
### Description: Develop a user interface component that allows users to drag and drop images for upload. Integrate client-side validation to check file type (e.g., JPEG, PNG, GIF) and file size before submission.
### Details:
Use a modern frontend framework (e.g., React) to build the drag-and-drop area. Implement validation logic to ensure only allowed image types and sizes are accepted, providing immediate feedback to users on invalid files.

## 2. Create Secure API Route for Handling Image Uploads [done]
### Dependencies: 2.1
### Description: Develop a backend API endpoint to receive image uploads securely. Ensure robust server-side validation of file type and size, and implement security best practices to prevent malicious uploads.
### Details:
Use a backend framework (e.g., Node.js with Express) and a middleware like Multer for handling multipart/form-data. Validate both MIME type and file extension, store files securely with randomized filenames, and return appropriate error messages for invalid uploads.

## 3. Integrate Supabase Storage and Configure Buckets [done]
### Dependencies: 2.2
### Description: Connect the backend API to Supabase storage for saving uploaded images. Set up and configure storage buckets with proper access controls and permissions.
### Details:
Use Supabase SDK or REST API to upload validated files to a designated bucket. Ensure the bucket is configured for secure access, with public/private settings as required by the application.

## 4. Implement Progress Tracking and Error Handling [done]
### Dependencies: 2.1, 2.2, 2.3
### Description: Add frontend and backend logic to track upload progress and handle errors gracefully, providing clear feedback to users throughout the upload process.
### Details:
Use progress events (e.g., XMLHttpRequest or fetch with progress callbacks) to display real-time upload status. Handle and display errors from both client-side validation and server/API responses, ensuring users are informed of any issues.

