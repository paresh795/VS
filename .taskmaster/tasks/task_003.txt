# Task ID: 3
# Title: Implement Furniture Masking with Lang-SAM
# Status: done
# Dependencies: 2
# Priority: high
# Description: Create the API route and frontend for automatic furniture detection and masking using Lang-Segment-Anything on Replicate.
# Details:
1. Create API route for mask generation:
   ```typescript
   // pages/api/mask.ts
   export default async function handler(req, res) {
     const { user } = await getAuth(req);
     if (!user) return res.status(401).json({ error: 'Unauthorized' });
     
     const { imageUrl, tags = "sofa,chair,table,lamp" } = req.body;
     
     // Create job record
     const job = await db.insert(jobs).values({
       userId: user.id,
       type: 'mask',
       status: 'processing',
       originalUrl: imageUrl
     }).returning();
     
     // Call Replicate Lang-SAM API
     const prediction = await replicate.run(
       "tmappdev/lang-segment-anything:891411c3...",
       { input: { image: getPublicUrl(imageUrl), text_prompt: tags } }
     );
     
     // Update job with result
     await db.update(jobs)
       .set({ status: 'completed', resultUrl: prediction.output })
       .where(eq(jobs.id, job[0].id));
     
     return res.status(200).json({ 
       jobId: job[0].id, 
       maskUrl: prediction.output 
     });
   }
   ```
2. Implement canvas overlay for mask preview:
   - Create a component that overlays the mask on the original image
   - Use pink color (#FF00FF) with 35% opacity
   - Allow toggling mask visibility
3. Implement retry logic for API failures
4. Add webhook handler for async completion

# Test Strategy:
1. Test mask generation with various room images
2. Verify mask accuracy for different furniture types
3. Test error handling and retry logic
4. Measure response time to ensure it meets the 15s p95 requirement
5. Verify proper canvas overlay rendering
6. Test webhook handling for async completion

# Subtasks:
## 1. Implement Lang-SAM API Integration with Replicate [done]
### Dependencies: None
### Description: Create a service module to handle communication with the Replicate API for Lang-SAM model, including proper authentication, request formatting, and response handling.
### Details:
Create a `services/replicate.ts` module that: 1) Configures the Replicate client with API key from environment variables, 2) Implements a `generateMask` function that takes image URL and tags as parameters, 3) Properly formats the request to the Lang-SAM model endpoint, 4) Handles API response and errors, 5) Returns a standardized response object with mask URL or error details.
<info added on 2025-06-23T22:52:40.086Z>
I've implemented the Replicate service for Lang-SAM integration with the following features:

- Created `services/replicate.ts` with proper Replicate client configuration using environment variables
- Implemented `generateMask` function that accepts image URL and furniture tags
- Used the correct Lang-SAM model ID: `tmappdev/lang-segment-anything:891411c38a6ed2d44c004b7b9e44217df7a5b07848f29ddefd2e28bc7cbf93bc`
- Added robust retry logic with exponential backoff (3 retries, 1s base delay)
- Implemented comprehensive error handling with detailed error messages and logging
- Enhanced furniture tag detection to include bed, dresser, cabinet, and bookshelf
- Created utility functions: `validateImageUrl()` and `getPredictionStatus()`
- Fixed TypeScript linting errors with proper type casting
- Added proper output handling for both array and single URL responses

Technical specifications:
- Model cost: ~$0.0014 per run (714 runs per $1)
- Runs on Nvidia A100 (80GB) GPU hardware
- Predictions typically complete within 1 second
- Returns PNG mask URLs for detected furniture

The implementation is now ready for API endpoint integration in the next subtask.
</info added on 2025-06-23T22:52:40.086Z>

## 2. Create Mask Generation API Route with Error Handling [done]
### Dependencies: 3.1
### Description: Implement the API route that handles mask generation requests, including user authentication, job tracking, and comprehensive error handling.
### Details:
Implement `pages/api/mask.ts` that: 1) Validates request body (imageUrl, tags), 2) Authenticates the user, 3) Creates a job record in the database with 'processing' status, 4) Calls the Replicate service, 5) Updates the job record with results, 6) Implements proper error handling for API failures, timeouts, and invalid inputs, 7) Returns appropriate HTTP status codes and error messages.
<info added on 2025-06-23T22:54:47.772Z>
Implemented `app/api/mask/route.ts` with both POST and GET endpoints. POST endpoint handles furniture masking requests with authentication via Clerk, input validation, credit balance checking (2 credits per mask), and job status management. GET endpoint allows job status checking with ownership verification. The implementation includes Drizzle ORM integration for database operations, comprehensive error handling with appropriate HTTP status codes, and a complete credit management system that deducts credits upon successful processing. The API follows RESTful principles with clear request/response formats and proper security measures including user isolation and job ownership validation.
</info added on 2025-06-23T22:54:47.772Z>
<info added on 2025-06-24T03:17:35.737Z>
Fixed critical workflow bug in the mask API that was causing "Job status must be 'pending', current status: completed" errors. The issue occurred because the frontend was passing upload job IDs (with 'completed' status) to the mask API which expected 'pending' status jobs. Implemented solution by modifying the mask API to create its own jobs rather than requiring pre-existing ones. Removed jobId requirement from request body, now only requiring imageUrl. Added automatic job creation with proper 'pending' status using randomUUID for ID generation. Updated frontend components to remove jobId from mask generation requests. This change creates cleaner separation between upload and mask operations, eliminates job status conflicts, simplifies frontend integration, and ensures proper job lifecycle management. All changes were tested and verified to resolve the workflow error.
</info added on 2025-06-24T03:17:35.737Z>

## 3. Develop Canvas Overlay Component for Mask Visualization [done]
### Dependencies: None
### Description: Create a React component that overlays the generated mask on the original image with proper styling and toggle functionality.
### Details:
Create `components/MaskOverlay.tsx` that: 1) Takes original image URL and mask URL as props, 2) Uses canvas or layered divs to overlay the mask with pink color (#FF00FF) at 35% opacity, 3) Implements toggle functionality to show/hide the mask, 4) Handles loading states while mask is being generated, 5) Provides zoom and pan functionality for detailed inspection, 6) Ensures responsive behavior across device sizes.
<info added on 2025-06-23T22:58:04.033Z>
The MaskOverlay component has been successfully implemented with enhanced functionality:

Created `components/mask/mask-overlay.tsx` with HTML5 Canvas-based visualization that supports:
- High-performance image compositing with proper mask blending
- Adjustable opacity control (10%-100%) using shadcn slider component
- Toggle functionality for mask visibility
- Loading states with visual feedback during mask generation
- Responsive design that auto-scales images within 800x600 dimensions
- Download capability to export composed images as PNG
- Proper error handling and CORS support for external image URLs
- Memory optimization with appropriate ref handling and cleanup

A comprehensive test interface was also developed at `app/(authenticated)/dashboard/(pages)/mask-test/page.tsx` that provides:
- Complete integration with the existing upload system
- Customizable furniture detection tag configuration
- Visual job selection and real-time processing status
- Credit display showing costs and remaining balance
- Clear user instructions and workflow guidance

The implementation follows a professional UI design using shadcn/ui components with consistent styling throughout.
</info added on 2025-06-23T22:58:04.033Z>
<info added on 2025-06-24T03:12:59.236Z>
A critical bug was fixed in the mask test page where it was failing with "Missing required fields: jobId, imageUrl" errors. The issue stemmed from a field name mismatch between the upload API response and mask test page expectations. The upload API returns "imageUrl" while the mask test page was looking for "url", causing originalImageUrl to be undefined when passed to the mask API. The solution involved modifying the handleUploadSuccess() function in mask-test/page.tsx to correctly use result.imageUrl instead of result.url. This ensures the selectedJob object contains the proper originalImageUrl value, allowing the mask API to receive the correct jobId and imageUrl parameters. The fix has been implemented and is ready for user testing, with mask generation now functioning as expected.
</info added on 2025-06-24T03:12:59.236Z>

## 4. Implement Asynchronous Job Handling with Webhooks [done]
### Dependencies: 3.2
### Description: Set up webhook handler for asynchronous job completion and implement client-side polling for job status updates.
### Details:
1) Create `pages/api/webhooks/replicate.ts` to handle callbacks from Replicate when jobs complete, 2) Implement job status polling in the frontend with exponential backoff, 3) Create a `useJobStatus` hook that manages polling and state updates, 4) Add webhook configuration to Replicate API calls, 5) Update database schema to support webhook IDs and callback data, 6) Implement proper security validation for webhook requests.
<info added on 2025-06-23T23:02:26.637Z>
Implemented comprehensive asynchronous job handling with webhooks for Replicate integration. Created `app/api/webhooks/replicate/route.ts` with HMAC-SHA256 signature verification for secure callbacks. Enhanced `lib/replicate.ts` with `generateMaskAsync()` function and updated `app/api/mask/route.ts` to support both synchronous and asynchronous processing modes. Added job status tracking with `replicateJobId` field and implemented a polling system with 3-second intervals and 5-minute timeout protection. Developed dual-mode support with UI toggle between sync and webhook modes, including real-time status updates and toast notifications. Implemented proper error handling, recovery mechanisms, and credit management to prevent abuse. Added health check endpoint for webhook monitoring. Installed and configured shadcn checkbox and slider components to enhance the user interface.
</info added on 2025-06-23T23:02:26.637Z>
<info added on 2025-06-24T03:24:41.759Z>
Implemented a development credits system to address insufficient credits issues during testing. Created app/api/dev/add-credits/route.ts with POST endpoint for adding credits and GET endpoint for checking balances, restricted to development environment only. Integrated the system into mask-test/page.tsx with a credit balance display, "Add 100 Credits" button, and real-time updates. The implementation leverages the existing creditTransactions table and getCreditBalance function while maintaining proper user isolation. The system provides developers with an easy way to manage credits during testing without requiring Stripe integration, displaying current balance with a 💰 icon, enabling one-click credit addition, and providing appropriate error handling with toast notifications. This solution eliminates the 402 Payment Required errors that occurred when users had insufficient credits for mask generation operations.
</info added on 2025-06-24T03:24:41.759Z>
<info added on 2025-06-24T03:28:53.651Z>
Fixed critical bug in the development credits system where the "Add 100 Credits" button was creating transaction records but not updating the user's actual credit balance. The issue stemmed from the development API only inserting into the creditTransactions table without updating the credits table that stores the current balance. Modified app/api/dev/add-credits/route.ts to use the proper addCredits() function from lib/credits.ts instead of manual creditTransactions insertion. The addCredits() function properly handles both updating the credits table and creating transaction records for the audit trail using database transactions for consistency. The implementation includes upsert logic for the credits table and maintains a proper audit trail while using SQL templates for atomic balance updates. Removed unused imports (creditTransactions, randomUUID) and verified that credits are now properly added and displayed in the UI.
</info added on 2025-06-24T03:28:53.651Z>

## 5. Optimize Performance and Implement Retry Logic [done]
### Dependencies: 3.1, 3.2, 3.4
### Description: Enhance the mask generation process with retry logic, caching, and performance optimizations to meet latency requirements.
### Details:
1) Implement exponential backoff retry logic for Replicate API calls, 2) Add request caching to prevent duplicate mask generation for the same image/tags, 3) Implement image preprocessing to optimize size before sending to Lang-SAM, 4) Add progress indicators for long-running operations, 5) Implement timeout handling for API calls, 6) Add telemetry to track performance metrics, 7) Optimize database queries with proper indexing.

