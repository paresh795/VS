# Task ID: 6
# Title: Implement Room Staging with Style Presets
# Status: pending
# Dependencies: 4, 5
# Priority: high
# Description: Create the API route and frontend for staging empty rooms with furniture in one of six style presets, generating two variants per request.
# Details:
1. Define style preset templates:
   ```typescript
   const STYLE_PRESETS = {
     modern: "Stage this {space} in Modern style. Use cohesive, professional interior décor with clean lines, neutral colors, and minimalist furniture. Preserve architecture and perspective.",
     scandinavian: "Stage this {space} in Scandinavian style. Use cohesive, professional interior décor with light woods, white walls, functional furniture, and hygge elements. Preserve architecture and perspective.",
     industrial: "Stage this {space} in Industrial style. Use cohesive, professional interior décor with raw materials, exposed brick, metal accents, and vintage furniture. Preserve architecture and perspective.",
     coastal: "Stage this {space} in Coastal style. Use cohesive, professional interior décor with light blues, whites, natural textures, and beach-inspired elements. Preserve architecture and perspective.",
     farmhouse: "Stage this {space} in Farmhouse style. Use cohesive, professional interior décor with rustic elements, shiplap, vintage accessories, and comfortable furniture. Preserve architecture and perspective.",
     luxury: "Stage this {space} in Luxury style. Use cohesive, professional interior décor with rich fabrics, elegant furniture, statement lighting, and high-end finishes. Preserve architecture and perspective."
   };
   ```
2. Create API route for room staging:
   ```typescript
   // pages/api/stage.ts
   export default async function handler(req, res) {
     const { user } = await getAuth(req);
     if (!user) return res.status(401).json({ error: 'Unauthorized' });
     
     const { emptyRoomUrl, style, space } = req.body;
     
     // Check and deduct credits (20 per variant × 2 variants)
     const { success } = await deductCredits(user.id, 40);
     if (!success) return res.status(402).json({ error: 'Insufficient credits' });
     
     // Get style prompt
     const stylePrompt = STYLE_PRESETS[style].replace('{space}', space);
     
     // Optional: Enrich with GPT-4o
     const enrichedPrompt = await enrichPromptWithGPT(stylePrompt, style, space);
     
     // Create job record
     const job = await db.insert(jobs).values({
       userId: user.id,
       type: 'stage',
       status: 'processing',
       originalUrl: emptyRoomUrl,
       metadata: { style, space }
     }).returning();
     
     // Call Replicate Flux Kontext-Pro API twice for variants
     const [prediction1, prediction2] = await Promise.all([
       replicate.run("black-forest-labs/flux-kontext-pro", { 
         input: {
           input_image: getPublicUrl(emptyRoomUrl),
           prompt: enrichedPrompt,
           aspect_ratio: "match_input_image",
           output_format: "jpg"
         }
       }),
       replicate.run("black-forest-labs/flux-kontext-pro", { 
         input: {
           input_image: getPublicUrl(emptyRoomUrl),
           prompt: enrichedPrompt,
           aspect_ratio: "match_input_image",
           output_format: "jpg",
           seed: Math.floor(Math.random() * 1000000) // Different seed for variation
         }
       })
     ]);
     
     // Update job with results
     await db.update(jobs)
       .set({ 
         status: 'completed', 
         resultUrl: prediction1.output[0],
         metadata: { 
           ...job[0].metadata, 
           variant2Url: prediction2.output[0] 
         }
       })
       .where(eq(jobs.id, job[0].id));
     
     return res.status(200).json({ 
       jobId: job[0].id, 
       stagedUrls: [prediction1.output[0], prediction2.output[0]]
     });
   }
   ```
3. Implement UI for style selection
   - Create style preset cards with preview images
   - Add room type selector (bedroom, living room, etc.)
   - Show processing indicator
   - Display both variants side by side
4. Implement optional GPT-4o prompt enrichment

# Test Strategy:
1. Test staging with all six style presets
2. Verify two distinct variants are generated
3. Test with different room types
4. Measure response time for variant generation
5. Verify credit deduction logic
6. Test GPT-4o prompt enrichment
7. Verify style consistency across multiple generations

# Subtasks:
## 1. Define Style Preset Templates and Constants [pending]
### Dependencies: None
### Description: Create a constants file to define the six style presets (modern, scandinavian, industrial, coastal, farmhouse, luxury) with their corresponding prompt templates.
### Details:
Create a `constants/stylePresets.ts` file that exports the STYLE_PRESETS object with the six style definitions. Each preset should have a template string with a {space} placeholder that will be replaced with the room type. Include metadata for each style such as display name, description, and a thumbnail image path for the UI.

## 2. Implement GPT-4o Prompt Enrichment Service [pending]
### Dependencies: None
### Description: Create a service that uses GPT-4o to enhance the base style prompts with more specific details based on the room type and style.
### Details:
Create a `services/promptEnrichment.ts` file with an `enrichPromptWithGPT` function that takes the base style prompt, style name, and space type as parameters. Use the OpenAI API to call GPT-4o with a system prompt that instructs it to enhance the staging prompt with specific furniture items, materials, and layout suggestions appropriate for the style and room type. Include error handling and fallback to the original prompt if the API call fails.

## 3. Create API Route for Room Staging [pending]
### Dependencies: None
### Description: Implement the API endpoint that processes staging requests, deducts credits, and generates two style variants using Replicate's Flux Kontext-Pro model.
### Details:
Create `pages/api/stage.ts` with a handler function that: 1) Authenticates the user, 2) Validates the request body (emptyRoomUrl, style, space), 3) Deducts 40 credits (20 per variant), 4) Gets the style prompt and enriches it with GPT-4o, 5) Creates a job record in the database, 6) Makes two parallel calls to Replicate with different seeds for variation, 7) Updates the job with results, and 8) Returns the job ID and staged image URLs.

## 4. Build Style Selection UI Components [pending]
### Dependencies: None
### Description: Create the UI components for selecting room type and style preset, including visual cards for each style option.
### Details:
Create a `components/StyleSelector.tsx` component that displays the six style options as cards with preview images, names, and brief descriptions. Implement a room type dropdown or button group for selecting the space type (bedroom, living room, kitchen, etc.). Style the components to match the application design and ensure they're responsive for different screen sizes. Include hover states and selection indicators.

## 5. Implement Staging Request and Credit Management [pending]
### Dependencies: None
### Description: Create the frontend logic to handle staging requests, including credit checking, file upload, and processing state management.
### Details:
Create a `hooks/useStaging.ts` custom hook that manages the staging workflow: 1) Check if user has sufficient credits before starting, 2) Handle empty room image upload to storage, 3) Submit the staging request to the API, 4) Track job status and loading states, and 5) Handle errors appropriately. Implement a confirmation dialog that shows the credit cost (40 credits) before proceeding.

## 6. Develop Variant Comparison UI [pending]
### Dependencies: None
### Description: Create a UI component for displaying and comparing the two generated style variants side by side.
### Details:
Build a `components/VariantComparison.tsx` component that displays the original empty room and both styled variants. Include features like: 1) Side-by-side comparison with responsive layout, 2) Ability to zoom in on images, 3) Option to download individual variants, 4) Button to regenerate variants (using more credits), and 5) Option to save favorite variants to the user's account. Implement smooth loading transitions and placeholders while images are loading.

