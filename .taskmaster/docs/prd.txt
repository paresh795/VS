# Virtual Staging SaaS — MVP PRD

**Last revised:** 23 Jun 2025
**Author:** P. R. / ChatGPT o3
**Status:** Approved for sprint planning

---

## 1 Executive Summary

Real-estate agents spend \$30–\$80 per photo and 24 h+ waiting for human virtual-stagers. This SaaS speeds that to <15 s and <\$1 per image by chaining three hosted AI endpoints:

1. **Lang-Segment-Anything (Replicate)** — pixel-accurate furniture masks.
2. **Flux Kontext-Pro (Replicate)** — prompt-only *or* mask-guided in-painting.
3. **Flux Kontext-Pro** again — restaging in one of six décor presets.

All compute lives on Replicate; no self-hosted GPUs or Fal.ai dependencies.
Auth via Clerk, storage via Supabase (S3 backed). Credits are sold in bundles (2 000 ≈ \$19.90).  Original assets auto-purge after 30 days.

---

## 2 Objectives & Non-Goals

| **Goal**                                       | **Metric**        |
| ---------------------------------------------- | ----------------- |
| Reduce staging TTI from 24 h → 15 s (p95)      | Latency logs      |
| Cut cost from \$30 → <\$1                      | Cost sheet        |
| Maintain wall/floor geometry (SSIM drop < 0.1) | Visual diff tests |

**Non-Goals**

* Video walkthroughs, multi-room batches, brand-custom websites—deferred to v2.

---

## 3 Personas

| Persona                  | Needs            | Success                    |
| ------------------------ | ---------------- | -------------------------- |
| Speed-First Agent        | Same-day listing | ≤15 s image                |
| DIY Investor             | Low cost         | <\$10 per property         |
| Brokerage Marketing Lead | Consistency      | Style presets & MLS ribbon |

---

## 4 Scope

### In-Scope

* Single-room JPEG/PNG upload (≤10 MB)
* Auto-mask + pink overlay preview
* Empty-room generation via two fallback paths
* Six style presets: **Modern, Scandinavian, Industrial, Coastal, Farmhouse, Luxury**
* Up to two staged variants per request
* Inline “chat edit” (colour/asset change)
* 4 K JPG download + optional “Virtually Staged” ribbon
* Credits & Stripe metered billing

### Out-of-Scope (v1)

* Batch upload (>1 photo)
* Mobile app
* Bulk watermarking / team analytics

---

## 5 User Journey

```mermaid
sequenceDiagram
  participant U as User
  participant FE as Front-End (Next.js)
  participant API as API Routes
  participant RepMask as Replicate Lang-SAM
  participant RepK as Replicate Kontext-Pro

  U->>FE: Upload room.jpg
  FE->>API: POST /mask
  API->>RepMask: image + tags
  RepMask-->>API: mask.png
  API-->>FE: mask overlay URL

  U->>FE: Click “Empty Room”
  FE->>API: POST /empty (Plan A)
  API->>RepK: prompt-only
  alt furniture still visible
      API->>RepK: mask + ControlNet inpaint (Plan B)
  end
  API-->>FE: emptyRoom.jpg

  U->>FE: Choose “Scandinavian + Bedroom”
  FE->>API: POST /stage
  API->>RepK: prompt + emptyRoom.jpg
  RepK-->>API: staged1.jpg, staged2.jpg
  API-->>FE: two variants

  U->>FE: “Change sofa to navy”
  FE->>API: POST /edit
  API->>RepK: small mask + edit prompt
  API-->>FE: edit.jpg

  FE->>U: Download link
```

---

## 6 Functional Requirements

| ID        | Requirement                                     | Priority |
| --------- | ----------------------------------------------- | -------- |
| **FR-01** | Upload JPEG/PNG ≤10 MB                          | Must     |
| **FR-02** | Auto-mask ≥90 % of sofas, chairs, lamps, tables | Must     |
| **FR-03** | p95 TTI ≤15 s (upload → empty room)             | Must     |
| **FR-04** | Six selectable styles (see §9)                  | Must     |
| **FR-05** | Two variants per staging request                | Should   |
| **FR-06** | Chat edit round-trip ≤4 s                       | Should   |
| **FR-07** | MLS ribbon toggle on download                   | Should   |
| **FR-08** | Credits ledger + Stripe metered billing         | Must     |

---

## 7 Non-Functional Requirements

* **Availability:** 99.5 % monthly (Replicate SLA + Supabase).
* **Security:** Clerk SOC-2 auth, HTTPS, no PII in logs.
* **Privacy:** Auto-delete originals & outputs after **30 days**.
* **Accessibility:** WCAG 2.1 AA; motion reduced if `prefers-reduced-motion`.
* **Compliance:** MLS ribbon supplied but optional.

---

## 8 System Architecture

```
Next.js (Vercel) ─ Clerk ─ Supabase (Postgres + Storage)
                       │
 ┌─────────────────────┴────────────┐
 │  Serverless API Routes (/api/*)  │
 │                                  │
 │  /mask   → Replicate  Lang-SAM   │
 │  /empty  → Replicate  Kontext-Pro│
 │            (Plan A)              │
 │          → Replicate  ControlNet │
 │            (Plan B fallback)     │
 │  /stage  → Replicate  Kontext-Pro│
 │  /edit   → Replicate  Kontext-Pro│
 └──────────────────────────────────┘
```

*Long-running jobs are tracked via Replicate web-hook → `POST /api/webhook` → update `jobs` table. No Redis until concurrency > 50.*

---

## 9 Prompt Templates

| Stage               | Template (placeholders in **bold**)                                                                                                                        |
| ------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |
| Empty-Room (Plan A) | “Remove all furniture and décor. Preserve walls, windows, flooring, lighting, and camera angle. Produce an empty room photo suitable for virtual staging.” |
| Empty-Room (Plan B) | Masked PNG + “Remove all white areas; keep remaining pixels unchanged.”                                                                                    |
| Staging             | “Stage this **<SPACE>** in **<STYLE>** style. Use cohesive, professional interior décor. Preserve architecture and perspective.”                           |
| Chat Edit           | “Replace **\<MASKED\_OBJECT>** with **<DETAILS>**; keep everything else unchanged.”                                                                        |

*(Optional) GPT-4o call enriches list of décor items for the chosen style.*

---

## 10 External API Contracts

### 10.1 Lang-SAM (mask) — Replicate

```ts
POST /api/mask            // server route
{
  imageUrl: "<supabase>",
  tags: "sofa,chair,table,lamp"
}

replicate.run(
  "tmappdev/lang-segment-anything:891411c3…",
  { input: { image: imageUrl, text_prompt: tags } }
)  // → returns PNG mask URL
```

### 10.2 Flux Kontext-Pro (in-place / staging)

```ts
await replicate.run("black-forest-labs/flux-kontext-pro", {
  input: {
    input_image: "<image-or-empty-room>",
    prompt: "<prompt from §9>",
    aspect_ratio: "match_input_image",
    output_format: "jpg"
  }
});
```

### 10.3 OpenRouter GPT (prompt enrichment)

```ts
const ai = new OpenAI({ baseURL:"https://openrouter.ai/api/v1", apiKey:OPENROUTER_KEY });

const {choices:[{message}]} = await ai.chat.completions.create({
  model:"google/gemini-2.5-pro-preview",
  messages:[{
    role:"user",
    content:`Suggest three Scandinavian bedroom accent items (sofa, lamp, artwork) in JSON`
  }]
});
```

---

## 11 Data Model (Drizzle)

| Table       | Key columns                                                   |
| ----------- | ------------------------------------------------------------- |
| **users**   | `id`, `clerk_id`, `email`                                     |
| **credits** | `user_id`, `balance`, `updated_at`                            |
| **jobs**    | `id`, `user_id`, `type`, `status`, `result_url`, `created_at` |

Migration example in `/drizzle/0001_init.sql`.

---

## 12 Credit Plan

* Bundle: **2 000 credits = \$19.90**
* Debits

  * Mask + Empty-Room (Plan A or B): **10 credits**
  * Each Staged Variant: **20 credits**
  * Chat Edit: **3 credits**

Stripe `usage_type: metered` → one invoice per month.

---

## 13 UX Guidelines

* **UI kit** – shadcn/ui.
* **Motion** – Framer Motion `layout` prop for page transitions (fade / slide 20 px, 300 ms, easing `easeInOut`).
* **Mask Preview** – `<canvas>` overlay: `globalAlpha = 0.35; ctx.fillStyle = #FF00FF`.
* **Download** – Ribbon component toggles “Virtually Staged”; default off.

---

## 14 Testing & Quality

* **Unit** – Vitest for API handlers.
* **E2E** – Playwright: upload → stage → download.
* **Visual** – `pixelmatch` SSIM threshold tests (wall preservation).
* **Latency** – p95 logged via Next.js middleware.

---

## 15 Development Phases & Milestones

| Week | Sprint Goal        | Key Deliverables                                  |
| ---- | ------------------ | ------------------------------------------------- |
| 1    | Scaffold & Auth    | Template fork, Clerk login, Supabase buckets      |
| 2    | Mask MVP           | `/mask` route, Lang-SAM call, overlay canvas      |
| 3    | Empty-Room Flow    | Prompt-only Plan A, credit ledger, Stripe sandbox |
| 4    | Mask-guided Plan B | ControlNet fallback, accuracy tests               |
| 5    | Staging & Styles   | Style picker, `/stage` route, two variants        |
| 6    | Chat Edit          | Inline mask + edit flow, credit debit             |
| 7    | Polish & Beta      | MLS ribbon, latency audit, docs freeze            |

---

## 16 Risks & Mitigations

| Risk                 | Impact         | Mitigation                              |
| -------------------- | -------------- | --------------------------------------- |
| Replicate rate-limit | Stalled jobs   | Exponential 429 retry + status polling  |
| Model drift          | Output quality | Pin model version IDs in `.env`         |
| High concurrency     | Latency spike  | Add Redis queue + g4dn spot if >50 jobs |

---

## 17 Glossary

| Term              | Meaning                                          |
| ----------------- | ------------------------------------------------ |
| **Mask**          | Binary PNG where white = furniture, black = keep |
| **TTI**           | Time-to-Image (upload → result)                  |
| **Plan A/Plan B** | Prompt-only vs. ControlNet fallback              |

---

